// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String         @unique
  password        String?
  bio             String?
  dob             DateTime?
  image           String?
  emailVerified   DateTime?
  createdAt       DateTime       @default(now())
  updateAt        DateTime       @updatedAt
  posts           Post[]
  comments        Comment[]
  notifications   Notification[]
  followers       Follower[]
  followersCount  Int            @default(0)
  followings      Following[]
  followingsCount Int            @default(0)
  Account         Account[]
  Session         Session[]
}

model Follower {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Following {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  medias    Media[]
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  comments  Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
}

model Notification {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  owner     User                 @relation(fields: [ownerId], references: [id])
  ownerId   String               @db.ObjectId
  metadata  NotificationMetadata
}

type Media {
  url  String
  type MediaType @default(Image)
  alt  String?
}

type NotificationMetadata {
  type   NotificationType
  postId String?          @db.ObjectId
  userId String?          @db.ObjectId
}

enum MediaType {
  Image
  Video
  Audio
}

enum NotificationType {
  Post
  Comment
  Like
  Follow
}
